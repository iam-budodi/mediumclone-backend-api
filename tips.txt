npm i -g @nestjs/cli : Install nest CLI globally.
nest new project-name : Scaffold a new project
npm i --save @nestjs/core @nestjs/common rxjs reflect-metadata : Manually create a new project from scratch by installing the core and supporting files with npm (or yarn).

nest g resource [name] : Creating a CRUD controller with the validation built-in, using the CLI's CRUD generator.

nest g controller [conrollerName] : Execute to create a controller using the CLI

create modules for every feature and isolate everything related to it inside the module.

relative path are bad:
  - not easy to understand project directory tree
  - cant copy paste them, the import will fail
  - cant replace it everywhere at once as pathes may be different

it is recommended to configure absolute path

postgres commands:
    - sudo psql -U budodi postgres => connect using default postgres user
    - \l => list all our databases
    - \du => list of users/roles
    - create database <dbName>; => creates dbs
    - create user <userName> with encrypted password '<password>'; => create roles
    - grant all privileges on database <dbName> to <userName>; => allow user to manage db
    - \dc <dbName> => connect to the database
    - \dt => display list of all tables
    - \d <tableName> => descibes how the table looks like
    - INSERT INTO <tableName>(<columnNames separated by comma>) VALUES('<columnValue>'); => create record
    - SELECT * FROM <tableName>; => retrieve data from table

npm install pg typeorm and @nestjs/typeorm to configure and bind postgres to nest app
create ormconfig.ts file on src directory and add config params then export it.

